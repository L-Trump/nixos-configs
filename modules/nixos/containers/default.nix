{
  mylib,
  pkgs,
  ...
}: {
  imports = mylib.scanPaths ./.;

  virtualisation.oci-containers.backend = "docker";

  # Networks
  systemd.services."docker-network-oci_net" = {
    path = [pkgs.docker];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f oci_net";
    };
    script = ''
      docker network inspect oci_net || docker network create oci_net
    '';
    partOf = ["docker-compose-oci-root.target"];
    wantedBy = ["docker-compose-oci-root.target"];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-oci-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
