# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}: {
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = ["xhci_pci" "ahci" "usbhid" "usb_storage" "sd_mod" "sdhci_pci"];
  boot.initrd.kernelModules = [];
  boot.kernelModules = ["kvm-intel"];
  boot.extraModulePackages = [];

  boot.supportedFilesystems = [
    "ext4"
    "btrfs"
    "xfs"
    "ntfs"
    "fat"
    "vfat"
    "exfat"
  ];

  boot.loader.grub = {
    enable = true;
    device = "nodev";
    efiSupport = true;
    useOSProber = false;
  };
  # boot.loader.systemd-boot.enable = true;
  boot.loader.efi = {
    canTouchEfiVariables = true;
    efiSysMountPoint = "/boot/efi";
  };
  # Use LTS kernel
  boot.kernelPackages = pkgs.linuxPackages;

  fileSystems."/btr_pool" = {
    device = "/dev/disk/by-uuid/12f13149-888b-4a28-8e27-a8af46860de6";
    fsType = "btrfs";
    # btrfs's top-level subvolume, internally has an id 5
    # we can access all other subvolumes from this subvolume.
    options = ["subvolid=5"];
  };

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/12f13149-888b-4a28-8e27-a8af46860de6";
    fsType = "btrfs";
    options = ["subvol=@root"];
  };

  fileSystems."/nix" = {
    device = "/dev/disk/by-uuid/12f13149-888b-4a28-8e27-a8af46860de6";
    fsType = "btrfs";
    options = ["subvol=@nix"];
  };

  fileSystems."/home" = {
    device = "/dev/disk/by-uuid/12f13149-888b-4a28-8e27-a8af46860de6";
    fsType = "btrfs";
    options = ["subvol=@home"];
  };

  fileSystems."/snapshots" = {
    device = "/dev/disk/by-uuid/12f13149-888b-4a28-8e27-a8af46860de6";
    fsType = "btrfs";
    options = ["subvol=@snapshots"];
  };

  fileSystems."/swap" = {
    device = "/dev/disk/by-uuid/12f13149-888b-4a28-8e27-a8af46860de6";
    fsType = "btrfs";
    options = ["subvol=@swap"];
  };

  fileSystems."/boot/efi" = {
    device = "/dev/disk/by-uuid/C53E-B753";
    fsType = "vfat";
    options = ["fmask=0022" "dmask=0022"];
  };

  swapDevices = [
    {
      device = "/swap/swapfile";
    }
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp2s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.tailscale0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp1s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
